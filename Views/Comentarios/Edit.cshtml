@model amazon.Models.Comentario

@{
    ViewData["Title"] = "Editar Comentario";
}

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-10">
            <div class="card shadow">
                <div class="card-header bg-warning text-dark">
                    <h4 class="mb-0">
                        <i class="fas fa-edit"></i> Editar Comentario
                    </h4>
                </div>
                <div class="card-body">
                    <form asp-action="Edit" method="post" id="editCommentForm">
                        @Html.AntiForgeryToken()
                        <input type="hidden" asp-for="Id" />
                        <input type="hidden" asp-for="ServicioRealizadoId" />
                        <input type="hidden" asp-for="UsuarioId" />
                        <input type="hidden" asp-for="FechaCreacion" />

                        @if (TempData["ErrorMessage"] != null)
                        {
                            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                                <i class="fas fa-exclamation-circle"></i> @TempData["ErrorMessage"]
                                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                            </div>
                        }

                        <!-- Información del servicio -->
                        <div class="row mb-4">
                            <div class="col-md-6">
                                <div class="card bg-light h-100">
                                    <div class="card-body">
                                        <h5 class="card-title">
                                            <i class="fas fa-wrench text-primary"></i> Detalles del Servicio
                                        </h5>
                                        <div class="mb-2">
                                            <strong>Servicio:</strong> @Model.ServicioRealizado?.Servicio?.Nombre
                                        </div>
                                        <div class="mb-2">
                                            <strong>Vehículo:</strong> @($"{Model.ServicioRealizado?.Vehiculo?.Marca} {Model.ServicioRealizado?.Vehiculo?.Modelo} ({Model.ServicioRealizado?.Vehiculo?.Placa})")
                                        </div>
                                        <div class="mb-2">
                                            <strong>Fecha:</strong> @Model.ServicioRealizado?.Fecha
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="card bg-light h-100">
                                    <div class="card-body">
                                        <h5 class="card-title">
                                            <i class="fas fa-history text-primary"></i> Información del Comentario
                                        </h5>
                                        <div class="mb-2">
                                            <strong>Creado:</strong> @Model.FechaCreacion.ToString("dd/MM/yyyy HH:mm")
                                        </div>
                                        @if (Model.FechaModificacion.HasValue)
                                        {
                                            <div class="mb-2">
                                                <strong>Última edición:</strong> @Model.FechaModificacion.Value.ToString("dd/MM/yyyy HH:mm")
                                            </div>
                                        }
                                        <div class="mb-2">
                                            <strong>Mecánico:</strong> @ViewBag.MecanicoNombre
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Sistema de calificación con estrellas -->
                        <div class="mb-4">
                            <h5 class="mb-3">
                                <i class="fas fa-star text-warning"></i> Calificación General
                                <small class="text-muted">(Servicio y atención del mecánico)</small>
                            </h5>
                            <div class="rating-container card bg-light">
                                <div class="card-body">
                                    <div class="rating-input text-center">
                                        @for (int i = 5; i >= 1; i--)
                                        {
                                            <input type="radio" id="star@(i)" name="Calificacion" value="@i" 
                                                   @(Model.Calificacion == i ? "checked" : "") required 
                                                   class="visually-hidden" />
                                            <label for="star@(i)" class="rating-label" title="@i estrellas">
                                                <i class="@(Model.Calificacion >= i ? "fas" : "far") fa-star fa-2x"></i>
                                            </label>
                                        }
                                    </div>
                                    <div class="rating-text text-center mt-3">
                                        @{
                                            var ratingText = Model.Calificacion switch
                                            {
                                                1 => "Malo",
                                                2 => "Regular",
                                                3 => "Bueno",
                                                4 => "Muy Bueno",
                                                5 => "Excelente",
                                                _ => "Seleccione una calificación"
                                            };

                                            var ratingClass = Model.Calificacion switch
                                            {
                                                1 => "bg-danger",
                                                2 => "bg-warning",
                                                3 => "bg-info",
                                                4 => "bg-primary",
                                                5 => "bg-success",
                                                _ => "bg-secondary"
                                            };
                                        }
                                        <span id="ratingText" class="badge @ratingClass px-3 py-2">@ratingText</span>
                                    </div>
                                    <span asp-validation-for="Calificacion" class="text-danger d-block text-center mt-2"></span>
                                </div>
                            </div>
                        </div>

                        <!-- Aspectos destacados -->
                        <div class="mb-4">
                            <h5 class="mb-3">
                                <i class="fas fa-thumbs-up text-success"></i> Aspectos Destacados
                            </h5>
                            <div class="card bg-light">
                                <div class="card-body">
                                    <p class="text-muted mb-3">Seleccione los aspectos positivos que destacaría de este servicio:</p>
                                    <div class="aspect-badges mb-3" id="aspectBadges">
                                        @{
                                            var aspectosSeleccionados = Model.AspectosDestacados?.Split(',').Select(a => a.Trim()).ToList() ?? new List<string>();
                                            
                                            var aspectos = new[] {
                                                new { Key = "Atención al cliente", Icon = "headset" },
                                                new { Key = "Profesionalismo", Icon = "user-tie" },
                                                new { Key = "Calidad del trabajo", Icon = "check-circle" },
                                                new { Key = "Precio justo", Icon = "dollar-sign" },
                                                new { Key = "Rapidez", Icon = "bolt" },
                                                new { Key = "Conocimiento técnico", Icon = "brain" },
                                                new { Key = "Limpieza", Icon = "broom" },
                                                new { Key = "Explicación clara", Icon = "comments" }
                                            };

                                            foreach (var aspecto in aspectos)
                                            {
                                                var isSelected = aspectosSeleccionados.Any(a => a.Contains(aspecto.Key));
                                                <span class="badge bg-primary me-2 mb-2 aspect-badge @(isSelected ? "selected" : "")" 
                                                      data-aspect="@aspecto.Key">
                                                    <i class="fas fa-@aspecto.Icon"></i> @aspecto.Key
                                                </span>
                                            }
                                        }
                                    </div>
                                    <input type="hidden" asp-for="AspectosDestacados" id="aspectosDestacadosInput" />
                                    <div id="selectedAspects" class="mt-2 mb-3">
                                        <p class="text-muted">Aspectos seleccionados: <span id="aspectCount">@(aspectosSeleccionados.Count)</span></p>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Comentario detallado -->
                        <div class="mb-4">
                            <h5 class="mb-3">
                                <i class="fas fa-comment-alt text-info"></i> Su Opinión
                            </h5>
                            <div class="form-floating">
                                <textarea asp-for="Contenido" class="form-control" id="comentarioTextarea" 
                                          placeholder="Comparta su experiencia con el servicio y el mecánico..." 
                                          style="height: 150px; min-height: 150px;" required></textarea>
                                <label for="comentarioTextarea">Escriba su comentario (mínimo 10 caracteres)</label>
                                <div class="form-text text-end mt-1">
                                    <span id="charCount">@(Model.Contenido?.Length ?? 0)</span>/1000 caracteres
                                </div>
                                <span asp-validation-for="Contenido" class="text-danger"></span>
                            </div>
                        </div>

                        <!-- Botones de acción -->
                        <div class="d-flex justify-content-between mt-4">
                            <a asp-action="MisComentarios" class="btn btn-secondary">
                                <i class="fas fa-arrow-left"></i> Volver
                            </a>
                            <button type="submit" class="btn btn-warning" id="submitButton">
                                <i class="fas fa-save"></i> Guardar Cambios
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>






@section Styles {
    <style>
        .rating-container {
            padding: 1.5rem;
            border-radius: 0.5rem;
        }

        .rating-input {
            display: flex;
            flex-direction: row-reverse;
            justify-content: center;
            gap: 0.75rem;
        }

        .rating-label {
            cursor: pointer;
            font-size: 2rem;
            color: #ddd;
            transition: all 0.3s ease;
        }

            .rating-label:hover,
            .rating-label:hover ~ .rating-label,
            input[type="radio"]:checked ~ .rating-label {
                color: #ffd700;
            }

            .rating-label i {
                transition: transform 0.2s ease;
            }

            .rating-label:hover i,
            input[type="radio"]:checked ~ .rating-label i {
                transform: scale(1.2);
            }

        .card {
            overflow: hidden;
            border: none;
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
            transition: all 0.3s ease;
        }

            .card:hover {
                box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
                transform: translateY(-5px);
            }

        .card-header {
            border-bottom: none;
            padding: 1.25rem 1.5rem;
        }

        .form-floating > .form-control {
            padding-top: 1.625rem;
        }

        .aspect-badge {
            cursor: pointer;
            transition: all 0.2s ease;
            user-select: none;
            padding: 0.5rem 0.75rem;
            font-weight: normal;
        }

            .aspect-badge:hover {
                transform: scale(1.05);
            }

            .aspect-badge.selected {
                background-color: #28a745 !important;
                font-weight: bold;
            }

        .badge {
            font-size: 0.85rem;
        }

        #selectedAspects {
            min-height: 1.5rem;
        }

        .btn {
            padding: 0.5rem 1.5rem;
            transition: all 0.3s ease;
        }

            .btn:hover {
                transform: translateY(-2px);
            }
    </style>
}










@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        $(document).ready(function () {
            // Variables para los textos de calificación
            const ratingTexts = {
                1: 'Malo',
                2: 'Regular',
                3: 'Bueno',
                4: 'Muy Bueno',
                5: 'Excelente'
            };

            const ratingClasses = {
                1: 'bg-danger',
                2: 'bg-warning',
                3: 'bg-info',
                4: 'bg-primary', 
                5: 'bg-success'
            };

            // Manejar la selección de estrellas
            $('input[name="Calificacion"]').change(function () {
                const rating = $(this).val();
                
                // Actualizar texto
                $('#ratingText').text(ratingTexts[rating])
                    .removeClass('bg-secondary bg-danger bg-warning bg-info bg-primary bg-success')
                    .addClass(ratingClasses[rating]);

                // Actualizar estrellas
                $('.rating-label i').removeClass('fas').addClass('far');

                $('.rating-label i').removeClass('fas').addClass('far');
                $(this).nextAll('.rating-label').find('i').removeClass('far').addClass('fas');
                $(this).next('.rating-label').find('i').removeClass('far').addClass('fas');
            });

            // Manejar selección de aspectos destacados
            $('.aspect-badge').click(function() {
                $(this).toggleClass('selected');
                updateAspectosDestacados();
            });

            // Actualizar campo oculto con aspectos destacados
            function updateAspectosDestacados() {
                let aspectos = [];
                $('.aspect-badge.selected').each(function() {
                    aspectos.push($(this).data('aspect'));
                });

                $('#aspectosDestacadosInput').val(aspectos.join(', '));
                $('#aspectCount').text(aspectos.length);
            }

            // Contador de caracteres
            $('#comentarioTextarea').on('input', function() {
                const maxLength = 1000;
                const currentLength = $(this).val().length;
                $('#charCount').text(currentLength);

                if (currentLength >= maxLength) {
                    $('#charCount').addClass('text-danger fw-bold');
                } else {
                    $('#charCount').removeClass('text-danger fw-bold');
                }
            });

            // Validación del formulario
            $('#editCommentForm').submit(function(e) {
                // Prevenir envío por defecto
                e.preventDefault();

                // Validar que haya una calificación
                const rating = $('input[name="Calificacion"]:checked').val();
                if (!rating) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Calificación requerida',
                        text: 'Por favor, seleccione una calificación de 1 a 5 estrellas'
                    });
                    return false;
                }

                // Validar comentario
                const contenido = $('#comentarioTextarea').val().trim();
                if (contenido.length < 10) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Comentario muy corto',
                        text: 'Por favor, escriba un comentario de al menos 10 caracteres'
                    });
                    return false;
                }

                // Confirmar antes de enviar
                Swal.fire({
                    title: '¿Guardar cambios?',
                    text: "¿Está seguro que desea actualizar este comentario?",
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#ffc107',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: 'Sí, guardar',
                    cancelButtonText: 'Cancelar'
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Mostrar spinner en el botón
                        $('#submitButton').prop('disabled', true)
                            .html('<i class="fas fa-spinner fa-spin"></i> Guardando...');

                        // Enviar el formulario
                        $(this).unbind('submit').submit();
                    }
                });
            });

            // Inicializar contador de caracteres
            $('#comentarioTextarea').trigger('input');

            // Efecto de aparición gradual
            $('.card').each(function(index) {
                $(this).css('opacity', 0).css('transform', 'translateY(20px)');
                setTimeout(() => {
                    $(this).css('opacity', 1).css('transform', 'translateY(0)');
                }, 100 * index);
            });
        });
    </script>
}
